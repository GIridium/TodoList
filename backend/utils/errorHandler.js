class ErrorResponse extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
  }
}

// ÂºÄÂèëÁéØÂ¢ÉÈîôËØØÂ§ÑÁêÜ
const sendErrorDev = (err, res) => {
  res.status(err.statusCode || 500).json({
    success: false,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};

// Áîü‰∫ßÁéØÂ¢ÉÈîôËØØÂ§ÑÁêÜ
const sendErrorProd = (err, res) => {
  // Êìç‰ΩúÈîôËØØÔºåÂèëÈÄÅÁªôÂÆ¢Êà∑Á´Ø
  if (err.isOperational) {
    res.status(err.statusCode || 500).json({
      success: false,
      message: err.message,
    });
  } 
  // ÁºñÁ®ãÊàñÂÖ∂‰ªñÊú™Áü•ÈîôËØØÔºå‰∏çÊ≥ÑÈú≤ÁªÜËäÇ
  else {
    console.error('ERROR üí•', err);
    
    res.status(500).json({
      success: false,
      message: 'Something went very wrong!',
    });
  }
};

// Â§ÑÁêÜMongoDB IDÈîôËØØ
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new ErrorResponse(message, 400);
};

// Â§ÑÁêÜMongoDBÈáçÂ§çÂ≠óÊÆµÈîôËØØ
const handleDuplicateFieldsDB = (err) => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
  const message = `Duplicate field value: ${value}. Please use another value!`;
  return new ErrorResponse(message, 400);
};

// Â§ÑÁêÜMongoDBÈ™åËØÅÈîôËØØ
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((el) => el.message);
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new ErrorResponse(message, 400);
};

// Â§ÑÁêÜJWTÈîôËØØ
const handleJWTError = () =>
  new ErrorResponse('Invalid token. Please log in again!', 401);

// Â§ÑÁêÜJWTËøáÊúüÈîôËØØ
const handleJWTExpiredError = () =>
  new ErrorResponse('Your token has expired! Please log in again.', 401);

// ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production') {
    let error = { ...err };
    error.message = err.message;

    // MongoDBÈîôËØØÂ§ÑÁêÜ
    if (err.name === 'CastError') error = handleCastErrorDB(error);
    if (err.code === 11000) error = handleDuplicateFieldsDB(error);
    if (err.name === 'ValidationError') error = handleValidationErrorDB(error);
    if (err.name === 'JsonWebTokenError') error = handleJWTError();
    if (err.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, res);
  }
};

module.exports.ErrorResponse = ErrorResponse;